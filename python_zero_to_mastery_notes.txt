pep = python enhancement proposals ,, community which standardize ways to write code..pep8, style guide for python codes
anaconda contains all tools needed for data science and machine learning
jupyter notebook helps visualize easily
everything in python is an object
python is an object oriented programming language because everything is built on class keyword and methods are used
to perform actions on them
an object has methods and attributes that can be accessed with the .method
we can create our own datatypes with diff attributes and methods
oop
oop is a paradigm - it helps us manage our codes, helps structure codes in a way that is easier to maintain,
extend and rewrite. as codes get bigger, it helps us organize millions of codes
code real life objects
we can create our own class using the class keyword then the name of the class in camelcase(capitalize each word)
#instantiate means creating instance(object) from a class
a class is a blueprint for creating objects, it has properties and methods
The __init__() function is called automatically every time the class is being used to create a new object.
when writing code, try to be DRY(do not repeat yourself)
when a  function doesnt return anything, we get none
one piece of code, one blueprint(class) is used to create multiple objects at different positions in memory,
they are distinct
oop help us add functionalities and mimic the real world
helps us write codes that are repeatable, organized, and memory efficient
attributes are dynamic pieces of data, they are unique to specific objects
Class object attribute is diff from regular attribute, its not dynamic and its in the same line as the method
note that self refers to the class
init is used when we want to create a custom object i.e. instantiate
creating a method for the class
there are three methods
1. instance method- the normal one that uses self
2. class method use cls as the first parameter in def the method
it can be used without instantiating Methods: Cannot access anything else in the class. Totally self-contained code.
Class Methods: Can access limited methods in the class. Can modify class specific details.

3. static method- this works as the above but doesnt the cls keyword and hence doesnt have access to the class
this is used when we don't care about the class attribute
Instance Methods: The most common method type. Able to access data and properties unique to each instance.
Static
all of this (oop) is to create our datatype that models the real world. help structure our code

four pillars of oop
1. encapsulation - binding of data and functions that manipulate the data to an object to keep all in a box
so users, codes and machines can interact with easily. the data and functions are the attributes and methods
functionalities are encapsulated for use(.methods)  it helps us mimic what happens in the real world
2. abstraction - hiding info and giving access only to whats necessary. only what the machine needs is provided per
time, all other things are kept away. when u call a method or function, it just implements , u dont have to go to the
python documentation to see how its run or whats done underneath the hood. we dont have to code certain things from
scratch-
private and public variables
this concepts comes in play under abstraction in case of overwriting of our methods
python uses an underscore to show private variables, it tells programmers not to use or touch that variable
__ a convention in python, dunder method, inbuilt function, we usually dont use it to create variables
3. inheritance - allows new objects take on properties of existing objects,, parent class and
children/sub/derived classes
#isinstance a builtin function to check for inheritance (instance, class)
doing an object. brings all of the attributes, methods and dunder methods
everything in python inherits from the base object class python comes with called object
everthing in python is from the base object thats y dunder methods are available when u do a .
4. polymorphism - poly means many, morphism means form. (many form). it refers to the way object classes can share
the same method name, and the method name in turn act differently based on what objects call it


# calling a method from a subclass of the parent class
use super()__init__(param)
or name of the parent class__init__(self,param)

#introspection - determining the type of an object at runtime(when the code is running)
python uses some functions to introspect codes
dir -  gives all of the method and attribute an object has
doing a . does introspection
#dunder magic methods
these allow us to use python specific functions on objects created through the class
dunder mthds are only modified when used on specific objects, it doesnt change their functions when used
normally outside the scope of modification

MRO - method resolution order
shows u the order with which it checks, it uses the algorithmn depth first search-

functional programming
separates of concerns (each chunk concerns itself with one thing it is good at),
packaging codes into separate sensible functionally organized chunks,
separates data and functions unlike oop(encapsulation).
it emphasizes simplicity. functions operate on well defined data structure
the data of a program and the behaviour of a program are separate


the goal ultimately of any programming type is
1. clear and understandable code
2. easy to extend codes i.e we can grow our code to make it better
3. easy to maintain
'4. code is 'dry'- do not repeat yourself
5. memory efficient

pillar of functional programming
pure functions- given the same input it always return the same output
                a function shouldnt result in side effect i,e, things that affect the outside world(screen)
                        or affecting a variable outside the scope of the function
pure functions help to remove bugs
it is impossible to have pure functions everywhere cos we have to interact with the world
lambda expressions are one time anonymous functions
# lambda param: action(param)

DECORATORS
they have @name
functions are first class citizens- they can be passed around like variables, like arguments

HIGHER ORDER FUNCTION HOC e.g. map,reduce, filter
#a function that accepts another function
# or  a function that returns another function
DECORATOR supercharges a function i.e. gives it more functionalities, it wraps a function and enhances it

ERROR HANDLING
am error that crashes the program is called an exception(built in exceptions)
error handling allows python script keep running even if there are errors
type error- btw diff data typesthat are incompatible
syntax error - nt a standard python syntax
name error - undefined name
index error - index not available
key error - for dict , accessing a key that doesnt exist
zero division error
Generator
they are functions
generators allow us generate sequence of values over time. uses keyword yield and it can pause and resume functions

# with generators we dont have to hold things in memory and hence perform things quickly
# generators are useful in calculating large set of data
# generators are faster than list when we want to loop a large range of data

MODULES is a way of organizing codes,, each .py file is a module
use snake case in naming modules
a module has functions in them

PACKAGE is a folder containing modules
to import from a package, do import package_name.module_name
in an ide a python package must have an __init__.py file, thats how a package is identified
note that u can create a python package in anther python package
PIP python install package

Regular expressions are extremely useful in extracting information from text such as code, log files, spreadsheets,
or even documents.
A RegEx, or Regular Expression, is a sequence of characters that forms a search pattern.

RegEx can be used to check if a string contains the specified search pattern.

pdb is a class debugger

questions

1. y wasnt it cat(pets) and just cat() 17
2. # lines 273, 274 and 275 gives the same output
questions on python
1. video on 5 , 11, gui
note that pylint is a checker for code, to check if the syntax is ok
2.  lines 273, 274 and 275 gives the same output
3.  print(super_list1[0]) line 296
4. explain folder 8 vidoe 5, performance decorator
5. explain folder 8 vidoe 6, authenticator decorator
6. return and print in functions
7. expian fibonacci exercise folder 9 video 5
8. utility in module,, y isnt any other name working
9. for the utility,py file, how do i see the pycache
10.^= whats it used for.. i saw it in random module
11. folder 11, video 6, video 7, video 8..... 9 to 14 didnt work
12. debugging in python pdb folder 12
13. file io folder 13
14.